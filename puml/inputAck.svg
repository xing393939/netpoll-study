<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1407px" preserveAspectRatio="none" style="width:1173px;height:1407px;" version="1.1" viewBox="0 0 1173 1407" width="1173px" zoomAndPan="magnify"><defs><filter height="300%" id="f1lb8sp69thl7e" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[43b2ac0f784cbf7b63adeff930a7d460]
cluster eventLoop--><rect fill="#FFFFFF" filter="url(#f1lb8sp69thl7e)" height="523" style="stroke: #000000; stroke-width: 1.5;" width="515" x="422" y="873"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="76" x="641.5" y="891.0439">eventLoop</text><!--MD5=[a7b5efdeeed829cdec42109b3daecbfa]
entity { \n<U+0009> reader.Next(n) \n }--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="77.3604" style="stroke: #A80036; stroke-width: 1.5;" width="147" x="626.5" y="911"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="621.5" y="916"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="621.5" y="978.3604"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="5" x="636.5" y="937.0439">{</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="91" x="672.5" y="956.1641">reader.Next(n)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="5" x="636.5" y="975.2842">}</text><!--MD5=[c4b1028d814f277bf80345974dbb67ad]
entity c.waitRead(n)--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="39.1201" style="stroke: #A80036; stroke-width: 1.5;" width="107" x="516.5" y="1048"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="511.5" y="1053"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="511.5" y="1077.1201"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="87" x="526.5" y="1074.0439">c.waitRead(n)</text><!--MD5=[b21b6620ee849c2fe1c22c83eae44915]
entity c.inputBuffer.Next(n)--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="39.1201" style="stroke: #A80036; stroke-width: 1.5;" width="149" x="706.5" y="1048"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="701.5" y="1053"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="701.5" y="1077.1201"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="129" x="716.5" y="1074.0439">c.inputBuffer.Next(n)</text><!--MD5=[69c656b8e2b28cfab38ceb4c8f7dfbe1]
entity c.waitReadSize = n \n for c.inputBuffer.Len() < n { \n<U+0009> <-c.readTrigger \n }--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="96.4805" style="stroke: #A80036; stroke-width: 1.5;" width="192" x="438" y="1284"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="433" y="1289"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="433" y="1370.4805"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="119" x="448" y="1310.0439">c.waitReadSize = n</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="172" x="448" y="1329.1641">for c.inputBuffer.Len() &lt; n {</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="99" x="484" y="1348.2842">&lt;-c.readTrigger</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="5" x="448" y="1367.4043">}</text><!--MD5=[bb7302e4f003069b47cbac4ded603b6d]
entity if b.isSingleNode(n) { \n<U+0009> return b.read.Next(n) \n }--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="77.3604" style="stroke: #A80036; stroke-width: 1.5;" width="188" x="693" y="1147"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="688" y="1152"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="688" y="1214.3604"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="132" x="703" y="1173.0439">if b.isSingleNode(n) {</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="132" x="739" y="1192.1641">return b.read.Next(n)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="5" x="703" y="1211.2842">}</text><ellipse cx="793.0386" cy="1331.9077" fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" rx="127.5386" ry="27.9077" style="stroke: #A80036; stroke-width: 1.5;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="230" x="678.0386" y="1337.9678">return node.buf[node.off:node.off+n]</text><!--MD5=[0d054bb84ffd728dba12b6dde8f13585]
entity inputs--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="77.3604" style="stroke: #000000; stroke-width: 1.5;" width="330" x="6" y="267"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="108" x="16" y="293.0439">c.bookSize = 512</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="110" x="16" y="312.1641">c.maxSize = 8196</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="310" x="16" y="331.2842">bs[0] = c.inputBuffer.book(c.bookSize, c.maxSize)</text><!--MD5=[80b5594e4d825d23f25c92b036af935d]
entity book--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="134.7207" style="stroke: #000000; stroke-width: 1.5;" width="326" x="8" y="560"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="219" x="18" y="586.0439">l := cap(b.write.buf) - b.write.malloc</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="55" x="18" y="605.1641">if l == 0 {</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="270" x="54" y="624.2842">b.write.next = newLinkBufferNode(maxSize)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="128" x="54" y="643.4043">b.write = b.write.next</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="5" x="18" y="662.5244">}</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="98" x="18" y="681.6445">b.write.Malloc(l)</text><!--MD5=[46a073ec851321961bb84df51c09e2dc]
entity iovecs--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="96.4805" style="stroke: #000000; stroke-width: 1.5;" width="187" x="357.5" y="404"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="159" x="367.5" y="430.0439">for i := 0; i &lt; len(bs); i++ {</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="131" x="403.5" y="449.1641">ivs[i].Base = &amp;bs[i][0]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="127" x="403.5" y="468.2842">ivs[i].Len = len(bs[i])</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="5" x="367.5" y="487.4043">}</text><!--MD5=[f92115063e8dc9f632cc320845e472c3]
entity bs--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="39.1201" style="stroke: #000000; stroke-width: 1.5;" width="248" x="70" y="107"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="228" x="80" y="133.0439">bs = operator.Inputs(p.barriers[i].bs)</text><ellipse cx="171.1275" cy="949.4255" fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" rx="147.6275" ry="31.9255" style="stroke: #A80036; stroke-width: 1.5;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="273" x="34.6275" y="955.4856">return node.buf[node.malloc:node.malloc+l]</text><!--MD5=[08b94d9d7a386bfafd6305b2f8ab49e4]
entity readv(operator.FD, bs, ivs)--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="39.1201" style="stroke: #A80036; stroke-width: 1.5;" width="191" x="361.5" y="107"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="356.5" y="112"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="356.5" y="136.1201"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="171" x="371.5" y="133.0439">readv(operator.FD, bs, ivs)</text><!--MD5=[f2413c2494a4058c6471d4fc8f4bd729]
entity iovLen := iovecs(bs, ivs) \n 调用readv(ivs)--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="58.2402" style="stroke: #A80036; stroke-width: 1.5;" width="172" x="371" y="276.5"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="366" y="281.5"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="366" y="324.7402"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="152" x="381" y="302.5439">iovLen := iovecs(bs, ivs)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="91" x="381" y="321.6641">调用readv(ivs)</text><!--MD5=[270fc37b6cd480b993d7056b143110c1]
entity evt&syscall.EPOLLIN != 0--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="39.1201" style="stroke: #A80036; stroke-width: 1.5;" width="180" x="367" y="8"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="362" y="13"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="362" y="37.1201"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="160" x="377" y="34.0439">evt&amp;syscall.EPOLLIN != 0</text><!--MD5=[9bf47070c6bd44d79731c0b9d6f2322e]
entity operator.InputAck(n)--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="39.1201" style="stroke: #A80036; stroke-width: 1.5;" width="150" x="603" y="107"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="598" y="112"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="598" y="136.1201"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="130" x="613" y="133.0439">operator.InputAck(n)</text><!--MD5=[d8685bd755e9f36d439f0068449e9879]
entity length = c.inputBuffer.bookAck(n) \n needTrigger = true--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="58.2402" style="stroke: #A80036; stroke-width: 1.5;" width="231" x="584.5" y="276.5"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="579.5" y="281.5"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="579.5" y="324.7402"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="211" x="594.5" y="302.5439">length = c.inputBuffer.bookAck(n)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="119" x="594.5" y="321.6641">needTrigger = true</text><!--MD5=[4aa28de41c50a57c07b2985f57a89ec7]
entity if length == n { \n<U+0009> needTrigger = c.onRequest() \n }--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="77.3604" style="stroke: #A80036; stroke-width: 1.5;" width="240" x="580" y="413.5"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="575" y="418.5"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="575" y="480.8604"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="91" x="590" y="439.5439">if length == n {</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="184" x="626" y="458.6641">needTrigger = c.onRequest()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="5" x="590" y="477.7842">}</text><!--MD5=[c63de1d8c553283c5bd9e1ef6bff0809]
entity c.onProcess(isProcessable, c.onRequestCallback)--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="39.1201" style="stroke: #A80036; stroke-width: 1.5;" width="338" x="531" y="608"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="526" y="613"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="526" y="637.1201"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="318" x="541" y="634.0439">c.onProcess(isProcessable, c.onRequestCallback)</text><!--MD5=[23ad9d35f687faf280c1c824fac71318]
entity runTask = go func \n runTask(c.ctx, task)--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="58.2402" style="stroke: #A80036; stroke-width: 1.5;" width="144" x="628" y="774"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="623" y="779"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="623" y="822.2402"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="115" x="638" y="800.0439">runTask = go func</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="124" x="638" y="819.1641">runTask(c.ctx, task)</text><!--MD5=[3d44103dc40a96894e078ddfa91e1e47]
entity if needTrigger && length >= c.waitReadSize) { \n<U+0009> c.triggerRead() \n }--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="77.3604" style="stroke: #A80036; stroke-width: 1.5;" width="307" x="855.5" y="413.5"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="850.5" y="418.5"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="850.5" y="480.8604"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="287" x="865.5" y="439.5439">if needTrigger &amp;&amp; length &gt;= c.waitReadSize) {</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="96" x="901.5" y="458.6641">c.triggerRead()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="5" x="865.5" y="477.7842">}</text><!--MD5=[582cf2aed029cbe5ece12d7ac4d6f732]
entity select { \n case c.readTrigger <- struct{}{}: \n default: \n}--><rect fill="#FEFECE" filter="url(#f1lb8sp69thl7e)" height="96.4805" style="stroke: #A80036; stroke-width: 1.5;" width="220" x="899" y="755"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="894" y="760"/><rect fill="#FEFECE" height="5" style="stroke: #A80036; stroke-width: 1.5;" width="10" x="894" y="841.4805"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="46" x="909" y="781.0439">select {</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="200" x="909" y="800.1641">case c.readTrigger &lt;- struct{}{}:</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="47" x="909" y="819.2842">default:</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="5" x="909" y="838.4043">}</text><!--MD5=[46bbd0bf60454b6d616e460119661ab8]
link bs to inputs--><path d="M191.58,146.11 C188.05,173.26 181.39,224.52 176.6,261.38 " fill="none" id="bs-&gt;inputs" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="175.91,266.71,181.0342,258.2992,176.553,261.7515,173.1007,257.2703,175.91,266.71" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[88d3547785a465e6f1b36c78230a3d46]
link inputs to book--><path d="M171,344.15 C171,395.76 171,489.48 171,554.73 " fill="none" id="inputs-&gt;book" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="171,559.77,175,550.77,171,554.77,167,550.77,171,559.77" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[440ece47eeac2252cabff43b11ff92ce]
link book to return node.buf[node.malloc:node.malloc+l]--><path d="M171,695.19 C171,761.07 171,859.38 171,912.06 " fill="none" id="book-&gt;return node.buf[node.malloc:node.malloc+l]" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="171,917.32,175,908.32,171,912.32,167,908.32,171,917.32" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[24a1cc7e797a761dce4c1556f21ed111]
link readv(operator.FD, bs, ivs) to iovLen := iovecs(bs, ivs) \n 调用readv(ivs)--><path d="M457,146.11 C457,175.72 457,233.98 457,270.99 " fill="none" id="readv(operator.FD, bs, ivs)-&gt;iovLen := iovecs(bs, ivs) \n 调用readv(ivs)" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="457,276.29,461,267.29,457,271.29,453,267.29,457,276.29" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8de2275e43ffd847756cf02af1977efa]
link iovLen := iovecs(bs, ivs) \n 调用readv(ivs) to iovecs--><path d="M455.83,334.7 C455.07,352.88 454.07,377.06 453.17,398.67 " fill="none" id="iovLen := iovecs(bs, ivs) \n 调用readv(ivs)-&gt;iovecs" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="452.96,403.81,457.3417,394.9895,453.1741,398.8146,449.349,394.647,452.96,403.81" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[108cb5f07706d0564265fad925bf2153]
link evt&syscall.EPOLLIN != 0 to bs--><path d="M406.6,47.09 C361.47,63.73 295.42,88.09 248.94,105.24 " fill="none" id="evt&amp;syscall.EPOLLIN != 0-&gt;bs" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="244.23,106.98,254.0575,107.6276,248.9227,105.2541,251.2961,100.1193,244.23,106.98" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[febc9e6d69a745e73ab7cb003c8e869e]
link evt&syscall.EPOLLIN != 0 to readv(operator.FD, bs, ivs)--><path d="M457,47.2 C457,62.77 457,85.02 457,101.83 " fill="none" id="evt&amp;syscall.EPOLLIN != 0-&gt;readv(operator.FD, bs, ivs)" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="457,106.85,461,97.85,457,101.85,453,97.85,457,106.85" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8ee2ebdb91b90bec2ea3913682fdcc1e]
link evt&syscall.EPOLLIN != 0 to operator.InputAck(n)--><path d="M499.35,47.09 C537.05,63.63 592.11,87.8 631.12,104.92 " fill="none" id="evt&amp;syscall.EPOLLIN != 0-&gt;operator.InputAck(n)" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="635.79,106.98,629.1586,99.6982,631.2122,104.9692,625.9412,107.0228,635.79,106.98" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[68d7acafe84a0c29710fc4e6dd702a54]
link operator.InputAck(n) to length = c.inputBuffer.bookAck(n) \n needTrigger = true--><path d="M680.31,146.11 C683.99,175.72 691.24,233.98 695.84,270.99 " fill="none" id="operator.InputAck(n)-&gt;length = c.inputBuffer.bookAck(n) \n needTrigger = true" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="696.49,276.29,699.3528,266.8664,695.8751,271.328,691.4136,267.8502,696.49,276.29" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[addb0427dc93f14dcff8d24baa345ee0]
link length = c.inputBuffer.bookAck(n) \n needTrigger = true to if length == n { \n<U+0009> needTrigger = c.onRequest() \n }--><path d="M700,334.7 C700,355.55 700,384.31 700,408.01 " fill="none" id="length = c.inputBuffer.bookAck(n) \n needTrigger = true-&gt;if length == n { \n&lt;U+0009&gt; needTrigger = c.onRequest() \n }" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="700,413.29,704,404.29,700,408.29,696,404.29,700,413.29" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5d78c4755d0d37ba0a22aa56d1fdff92]
link if length == n { \n<U+0009> needTrigger = c.onRequest() \n } to c.onProcess(isProcessable, c.onRequestCallback)--><path d="M700,490.65 C700,524.61 700,573.55 700,602.48 " fill="none" id="if length == n { \n&lt;U+0009&gt; needTrigger = c.onRequest() \n }-&gt;c.onProcess(isProcessable, c.onRequestCallback)" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="700,607.64,704,598.64,700,602.64,696,598.64,700,607.64" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[106aa7fba7720f219031f6d0d5e4a075]
link c.onProcess(isProcessable, c.onRequestCallback) to runTask = go func \n runTask(c.ctx, task)--><path d="M700,647.07 C700,676.06 700,732.51 700,768.68 " fill="none" id="c.onProcess(isProcessable, c.onRequestCallback)-&gt;runTask = go func \n runTask(c.ctx, task)" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="700,773.86,704,764.86,700,768.86,696,764.86,700,773.86" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[58db7fd7e180b1f4d7880d48f84788e9]
link runTask = go func \n runTask(c.ctx, task) to { \n<U+0009> reader.Next(n) \n }--><path d="M700,832.2 C700,853.05 700,881.81 700,905.51 " fill="none" id="runTask = go func \n runTask(c.ctx, task)-&gt;{ \n&lt;U+0009&gt; reader.Next(n) \n }" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="700,910.79,704,901.79,700,905.79,696,901.79,700,910.79" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[69abbd973f9a50711d8639b192e8afc6]
link { \n<U+0009> reader.Next(n) \n } to c.waitRead(n)--><path d="M657.79,988.16 C636.98,1006.74 612.59,1028.5 594.81,1044.36 " fill="none" id="{ \n&lt;U+0009&gt; reader.Next(n) \n }-&gt;c.waitRead(n)" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="590.89,1047.86,600.2677,1044.8503,594.6199,1044.5302,594.9401,1038.8824,590.89,1047.86" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0703af833a9530ec1a125030d5ba97d2]
link c.waitRead(n) to c.waitReadSize = n \n for c.inputBuffer.Len() < n { \n<U+0009> <-c.readTrigger \n }--><path d="M567.41,1087.38 C561.99,1126.92 549.27,1219.65 541.18,1278.61 " fill="none" id="c.waitRead(n)-&gt;c.waitReadSize = n \n for c.inputBuffer.Len() &lt; n { \n&lt;U+0009&gt; &lt;-c.readTrigger \n }" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="540.46,1283.86,545.6318,1275.4783,541.1311,1278.9052,537.7042,1274.4046,540.46,1283.86" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[54d3191a53c764552a65662c72003457]
link { \n<U+0009> reader.Next(n) \n } to c.inputBuffer.Next(n)--><path d="M726.3,988.16 C739.05,1006.42 753.95,1027.77 764.98,1043.56 " fill="none" id="{ \n&lt;U+0009&gt; reader.Next(n) \n }-&gt;c.inputBuffer.Next(n)" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="767.98,1047.86,766.1003,1038.1922,765.1146,1043.7625,759.5443,1042.7768,767.98,1047.86" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3ce0e3dc44e0562f05ded8e65e53e275]
link c.inputBuffer.Next(n) to if b.isSingleNode(n) { \n<U+0009> return b.read.Next(n) \n }--><path d="M781.96,1087.14 C782.72,1101.77 783.81,1122.74 784.77,1141.47 " fill="none" id="c.inputBuffer.Next(n)-&gt;if b.isSingleNode(n) { \n&lt;U+0009&gt; return b.read.Next(n) \n }" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="785.04,1146.69,788.5711,1137.4959,784.7825,1141.6966,780.5817,1137.908,785.04,1146.69" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[eec1bdc2bd2c3cb01b3ef8edff1abc40]
link if b.isSingleNode(n) { \n<U+0009> return b.read.Next(n) \n } to return node.buf[node.off:node.off+n]--><path d="M788.56,1224.09 C789.52,1247.16 790.73,1276.41 791.65,1298.48 " fill="none" id="if b.isSingleNode(n) { \n&lt;U+0009&gt; return b.read.Next(n) \n }-&gt;return node.buf[node.off:node.off+n]" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="791.86,1303.64,795.4698,1294.4765,791.6453,1298.6446,787.4772,1294.8201,791.86,1303.64" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4cf172020d23e9a0af1e67a8e2047aa6]
link length = c.inputBuffer.bookAck(n) \n needTrigger = true to if needTrigger && length >= c.waitReadSize) { \n<U+0009> c.triggerRead() \n }--><path d="M759.94,334.53 C806.62,356.36 872.02,386.94 924.08,411.29 " fill="none" id="length = c.inputBuffer.bookAck(n) \n needTrigger = true-&gt;if needTrigger &amp;&amp; length &gt;= c.waitReadSize) { \n&lt;U+0009&gt; c.triggerRead() \n }" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="928.76,413.48,922.2972,406.0482,924.2294,411.3648,918.9128,413.2971,928.76,413.48" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5e0411ee3e73d2c86a69a95c6b34a391]
link if needTrigger && length >= c.waitReadSize) { \n<U+0009> c.triggerRead() \n } to select { \n case c.readTrigger <- struct{}{}: \n default: \n}--><path d="M1009,490.68 C1009,553.25 1009,678.71 1009,749.77 " fill="none" id="if needTrigger &amp;&amp; length &gt;= c.waitReadSize) { \n&lt;U+0009&gt; c.triggerRead() \n }-&gt;select { \n case c.readTrigger &lt;- struct{}{}: \n default: \n}" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1009,754.79,1013,745.79,1009,749.79,1005,745.79,1009,754.79" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0daaa4f168f0afa70bdfa6547f8071bf]
@startuml

rectangle "eventLoop" {
    [{ \n<U+0009> reader.Next(n) \n }]
    [c.waitRead(n)]
    [c.inputBuffer.Next(n)]
    [c.waitReadSize = n \n for c.inputBuffer.Len() < n { \n<U+0009> <-c.readTrigger \n }]
    [if b.isSingleNode(n) { \n<U+0009> return b.read.Next(n) \n }]
    (return node.buf[node.off:node.off+n])
}

rectangle "c.bookSize = 512 \n c.maxSize = 8196 \n bs[0] = c.inputBuffer.book(c.bookSize, c.maxSize)" as inputs
rectangle "l := cap(b.write.buf) - b.write.malloc \n if l == 0 { \n<U+0009> b.write.next = newLinkBufferNode(maxSize) \n<U+0009> b.write = b.write.next \n } \n b.write.Malloc(l)" as book
rectangle "for i := 0; i < len(bs); i++ { \n<U+0009> ivs[i].Base = &bs[i][0] \n<U+0009> ivs[i].Len = len(bs[i]) \n }" as iovecs
rectangle "bs = operator.Inputs(p.barriers[i].bs)" as bs
bs - - -> inputs
inputs - - -> book
book - - -> (return node.buf[node.malloc:node.malloc+l])
[readv(operator.FD, bs, ivs)] - - -> [iovLen := iovecs(bs, ivs) \n 调用readv(ivs)]
[iovLen := iovecs(bs, ivs) \n 调用readv(ivs)] - -> iovecs

[evt&syscall.EPOLLIN != 0] - -> bs
[evt&syscall.EPOLLIN != 0] - -> [readv(operator.FD, bs, ivs)]
[evt&syscall.EPOLLIN != 0] - -> [operator.InputAck(n)]

[operator.InputAck(n)] - - -> [length = c.inputBuffer.bookAck(n) \n needTrigger = true]
[length = c.inputBuffer.bookAck(n) \n needTrigger = true] - -> [if length == n { \n<U+0009> needTrigger = c.onRequest() \n }]
[if length == n { \n<U+0009> needTrigger = c.onRequest() \n }] - -> [c.onProcess(isProcessable, c.onRequestCallback)]
[c.onProcess(isProcessable, c.onRequestCallback)] - -> [runTask = go func \n runTask(c.ctx, task)]
[runTask = go func \n runTask(c.ctx, task)] - -> [{ \n<U+0009> reader.Next(n) \n }]
[{ \n<U+0009> reader.Next(n) \n }] - -> [c.waitRead(n)]
[c.waitRead(n)] - - -> [c.waitReadSize = n \n for c.inputBuffer.Len() < n { \n<U+0009> <-c.readTrigger \n }]
[{ \n<U+0009> reader.Next(n) \n }] - -> [c.inputBuffer.Next(n)]
[c.inputBuffer.Next(n)] - -> [if b.isSingleNode(n) { \n<U+0009> return b.read.Next(n) \n }]
[if b.isSingleNode(n) { \n<U+0009> return b.read.Next(n) \n }] - -> (return node.buf[node.off:node.off+n])
[length = c.inputBuffer.bookAck(n) \n needTrigger = true] - -> [if needTrigger && length >= c.waitReadSize) { \n<U+0009> c.triggerRead() \n }]
[if needTrigger && length >= c.waitReadSize) { \n<U+0009> c.triggerRead() \n }] - - -> [select { \n case c.readTrigger <- struct{}{}: \n default: \n}]

@enduml

PlantUML version 1.2020.03beta6(Unknown compile time)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 1.8.0_202-release-1483-b49
Operating System: Windows 10
Default Encoding: GBK
Language: zh
Country: CN
--></g></svg>